###
# 
# Â© Copyright 2017 Greg Symons <gsymons@gsconsulting.biz>.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
###


##
# Defaults
#
tipster {
  ##
  # Configuration settings for the HTTP API
  #
  api {
    address: 0.0.0.0
    port: 8080
  }

  ##
  # Configuration for the storage module
  #
  storage {
    dbhost = "tipster-db"
    dbname = "tipster"
    
    defaults {
      db {
        connectionPool = HikariCP
        url = "jdbc:postgresql://"${tipster.storage.dbhost}"/"${tipster.storage.dbname}
        connectionInitSql = "set search_path = public,"${tipster.storage.dbname}
        properties {
          ApplicationName = "tipster"
        }
      }
    }

    ##
    # Configuration for reading from storage. Reads are separated from writes
    # to potentially support scaling read capacity horizontally using
    # read-replicas.
    #
    read = ${tipster.storage.defaults}
    read {
      db {
        user = "tipster_read"
        password = "tipster_read"
      }
    }
    ##
    # Configuration for writing to storage.
    #
    write = ${tipster.storage.defaults}
    write {
      db {
        user = "tipster_write"
        password = "tipster_write"
      }
    }
    ##
    # Configuration for the Flyway schema migrations
    #
    migrations {
      flyway {
        url      = ${tipster.storage.write.db.url}
        user     = ${tipster.storage.dbname}
        password = ${tipster.storage.dbname}
        schemas  = ${tipster.storage.dbname}
        placeholders {
          db {
            name   = ${tipster.storage.dbname}
            schema = ${tipster.storage.dbname}
          }
          initial_read_user {
            name     = ${tipster.storage.read.db.user}
            password = ${tipster.storage.read.db.password}
          }

          initial_write_user {
            name     = ${tipster.storage.write.db.user}
            password = ${tipster.storage.write.db.password}
          }
        }
      }
    }
  }

  dispatchers {
    #A separate thread-pool for migrations, since they do blocking I/O
    migration-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 1
      }
    }
  }
}

##
# Environment Overrides
#
tipster {
  api {
    address: ${?TIPSTER_LISTEN_ADDRESS}
    port: ${?TIPSTER_LISTEN_PORT}
  }

  storage {
    defaults {
      db {
        url = ${?TIPSTER_DB_URL}
        driver = "org.postgresql.Driver"
      }
    }

    read {
      db {
        url      = ${?TIPSTER_DB_READ_URL}
        user     = ${?TIPSTER_DB_READ_USER}
        password = ${?TIPSTER_DB_READ_PASSWORD}
      }
    }

    write {
      db {
        url      = ${?TIPSTER_DB_WRITE_URL}
        user     = ${?TIPSTER_DB_WRITE_USER}
        password = ${?TIPSTER_DB_WRITE_PASSWORD}
      }
    }

    migrations {
      flyway {
        url      = ${?TIPSTER_DB_MIGRATIONS_URL}
        user     = ${?TIPSTER_DB_MIGRATIONS_USER}
        password = ${?TIPSTER_DB_MIGRATIONS_PASSWORD}
        cleanOnValidationError = ${?TIPSTER_DB_MIGRATIONS_CLEAN_ON_VALIDATE_FAILURE}
      }
    }
  }
}

akka {
  actor {
    guardian-supervisor-strategy = "tipster.TipsterGuardianStrategy"

    debug {
      receive = on
    }

    deployment {
      /storage/migration-supervisor/migrator {
        dispatcher = tipster.dispatchers.migration-dispatcher
      }
    }
  }
}

# vim:ft=hocon
